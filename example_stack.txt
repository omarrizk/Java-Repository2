public class Main {

    public static void main(String[] args) {

        int num = args.length == 1 ? Integer.parseInt(args[0]) : 11;

        Stack<Integer> stack = Math.random() < 0.5 ? new AStack<Integer>()
                                                   : new RStack<Integer>();
        System.out.println(stack);
        long start, stop;
        start = System.nanoTime();
        for (int i = 0; i < num; ++i) {
            stack.push(i);
        }
        Integer j;
        while ((j = stack.pop()) != null) {
            System.out.println(j);
        }
        stop = System.nanoTime();
        System.out.println(stop - start);
    }
}

interface Stack<E> {
    E pop();
    void push(E data);
}

class AStack<E> implements Stack<E> {

    private void grow() {
        Object[] temp = new Object[stack.length * 2];
        for (int i = 0; i < stack.length; ++i) {
            temp[i] = stack[i];
        }
        stack = temp;
    }

    public E pop() {
        if (stack.length > 10 && top <= stack.length / 3) {
            shrink();
        }
        E temp = null;
        if (top > 0) {
            temp = (E)stack[--top];
        }
        return temp;
    }

    public void push(E data) {
        if (top >= stack.length) {
            grow();
        }
        stack[top++] = data;
    }

    private void shrink() {
        Object[] temp = new Object[stack.length / 2];
        for (int i = 0; i < temp.length; ++i) {
            temp[i] = stack[i];
        }
        stack = temp;
    }

    private Object[] stack = new Object[10];
    private int top;
}

class RStack<E> implements Stack<E> {

    private class Node<T> {
        private Node(T data) {
            this.data = data;
        }
        private T data;
        private Node<T> next;
    }

    public E pop() {
        E temp = null;
        if (head != null) {
            temp = head.data;
            head = head.next;
        }
        return temp;
    }

    public void push(E data) {
        Node<E> temp = new Node<E>(data);
        temp.next = head;
        head = temp;
    }

    private Node<E> head;
}
